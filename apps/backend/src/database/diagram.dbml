Enum UserProvider {
  'GITHUB'
  'ETH'
}

Enum CeremonyType {
  'PHASE1'
  'PHASE2'
}

Enum CeremonyState {
  'SCHEDULED'
  'OPENED'
  'PAUSED'
  'CLOSED'
  'CANCELED'
  'FINALIZED'
}

Enum CircuitTimeoutType {
  'DYNAMIC'
  'FIXED'
  'LOBBY'
}

Enum ParticipantStatus {
  'CREATED'
  'WAITING'
  'READY'
  'CONTRIBUTING'
  'CONTRIBUTED'
  'DONE'
  'FINALIZING'
  'FINALIZED'
  'TIMEDOUT'
  'EXHUMED'
}

Enum ParticipantContributionStep {
  'DOWNLOADING'
  'COMPUTING'
  'UPLOADING'
  'VERIFYING'
  'COMPLETED'
}

Table users {
  id int [pk, increment]
  displayName varchar [not null]
  creationTime int [not null]
  lastSignInTime int
  lastUpdated int
  avatarUrl varchar
  provider UserProvider [not null, default: 'GITHUB']
}

Table projects {
  id int [pk, increment]
  name varchar [not null, note: 'title in the frontend']
  contact varchar [not null, note: 'E.g.: nicoserranop (Discord)']
  coordinatorId int [ref: > users.id, not null]
}

Table ceremonies {
  projectId int [ref: > projects.id, not null]
  id int [pk, increment]
  description varchar [note: 'description in the frontend']
  type CeremonyType [not null, default: 'PHASE2']
  state CeremonyState [not null, default: 'SCHEDULED']
  start_date int [not null]
  end_date int [not null]
  penalty int [not null]
  authProviders json [not null, note: 'check auth providers classes']
}

Table circuits {
  ceremonyId int [ref: > ceremonies.id, not null]
  id int [pk, increment]
  name varchar [not null]
  timeoutMechanismType CircuitTimeoutType [not null, default: 'FIXED']
  dynamicThreshold int
  fixedTimeWindow int
  sequencePosition int [not null]
  zKeySizeInBytes int
  constraints int
  pot int
  averageContributionComputationTime int
  averageFullContributionTime int
  averageVerifyContributionTime int
  compiler json
  template json
  verification json [not null]
  artifacts json [not null]
  metadata json
  files json
}

Table contributions {
  circuitId int [ref: > circuits.id, not null]
  participantId int [ref: > participants.id, not null]
  id int [pk, increment]
  contributionComputationTime int
  fullContributionTime int
  verifyContributionTime int
  zkeyIndex int
  valid boolean
  lastUpdated int
  files json
  verificationSoftware json
  beacon json
}

Table participants {
  userId int [ref: > users.id, not null]
  ceremonyId int [ref: > ceremonies.id, not null]
  id int [pk, increment]
  status ParticipantStatus [not null, default: 'CREATED']
  contributionStep ParticipantContributionStep [not null]
  contributionProgress int
  contributionStartedAt int
  verificationStartedAt int
  tempContributionData json
  timeout json [note: 'Array of timeouts. Check Timeout class']
}
